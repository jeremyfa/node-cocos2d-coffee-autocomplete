{
  "name": "httpsync",
  "version": "0.0.7",
  "scripts": {
    "install": "sh build.sh",
    "test": "make test"
  },
  "description": "`httpsync` is a port of libcurl to node.js. Its interface emulates the  `http` module of node.js. But in contrast to `http` module's asynchronous functions, `httpsync` provides the equivalent synchronous APIs.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fengmk2/node-curl.git"
  },
  "keywords": [
    "curl",
    "sync",
    "http"
  ],
  "devDependencies": {
    "should": "*",
    "mocha": "*",
    "form-data": "0.0.3"
  },
  "author": {
    "name": "zcbenz"
  },
  "license": "MIT",
  "readme": "# httpsync\n\n[![Build Status](https://secure.travis-ci.org/fengmk2/node-curl.png)](http://travis-ci.org/fengmk2/node-curl)\n\n`httpsync` is a port of libcurl to node.js. Its interface emulates the\n`http` module of node.js. But in contrast to `http` module's asynchronous\nfunctions, node-curl provides the equivalent synchronous APIs.\n\n## Install\n\n* required libcurl: http://curl.haxx.se/libcurl/\n\n```bash\n$ npm install httpsync\n```\n\n## APIs\n\n### httpsync.request(options)\n \n Options:\n\n - `url`             (required) The url to GET/POST, such as \"http://host:80/index.php\", just like what you input in the browser.\n - `method`          `GET`, `POST` or `HEAD` or any other valid request. And even `FUCK` if your server supports it.\n - `headers`         Custom headers to be sent. \n - `useragent`       The User Agent string\n - `timeout`         Maximum time in seconds that you allow the libcurl transfer operation to take.\n - `connectTimeout`  Maximum time in seconds that you allow the connection to the server to take.\n - `debug`           `httpsync` will print debug informations is set to true\n\n Example\n\n```javascript\nvar httpsync = require('httpsync');\nvar req = httpsync.request({\n  url: \"http://cnodejs.org\",\n  method: \"GET\",\n  useragent: \"Ultimate Web Browser\",\n  headers: {\n    Tag: \"TGB3123\",\n    String: \"A long string\"\n  }\n});\n```\n\n### httpsync.get([options | url])\n\n It's equivalent to `curl.request` but the method is default to `GET`.\n\n And you can have\n\n```javascript\nvar httpsync = require('httpsync');\nvar req = httpsync.get({ url : \"http://cnodejs.org\"});\nvar res = req.end();\nconsole.log(res);\n```\n\n Or just straight forward\n\n```javascript\nvar httpsync = require('httpsync');\nvar req = httpsync.get(\"http://cnodejs.org\");\n```\n\n### request.write(chunk)\n \n Write a chunk of data to the request. The type of data can be String or Buffer.\n\n### request.end([chunk])\n\n Send the request and get response.\n\n Example\n\n```javascript\nvar req = curl.request({\n  url: \"http://cnodejs.org\",\n  method: \"POST\"\n});\nreq.write(\"Some text\\n\");\nreq.write(\"another text\");\nconsole.log(req.end());\n```\n\n### request.endFile(filePath)\n\n Send a file directly. The method will default to `PUT`.\n\n Example\n\n```javascript\nvar req = curl.request({\n  url: \"http://cnodejs.org\",\n});\nreq.endFile(\"/etc/passwd\");\n```\n\n### response\n\n The response Object is what you get after req.end (), it has following\n fields:\n\n - `data`        A Buffer that stores data sent by server.\n - `headers`     Complete response headers, even contains those custom ones.\n - `ip`          IP address of the server.\n - `statusCode`  Status code that sent by server.\n\n## Contributors\n\nThanks goes to the people who have contributed code to this module, see the [GitHub Contributors page](https://github.com/fengmk2/node-curl/graphs/contributors).\n\nBelow is the output from `git-summary`\n\n```\n project: node-curl\n commits: 33\n active : 8 days\n files  : 24\n authors: \n    21  赵成                  63.6%\n    12  fengmk2                 36.4%\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 fengmk2 &lt;fengmk2@gmail.com&gt;\nCopyright (c) 2012 zcbenz https://github.com/zcbenz\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fengmk2/node-curl/issues"
  },
  "_id": "httpsync@0.0.7",
  "dist": {
    "shasum": "881a7f2f50fc8795fa545f32a9fa582b280af72c"
  },
  "_from": "httpsync@",
  "_resolved": "https://registry.npmjs.org/httpsync/-/httpsync-0.0.7.tgz"
}
